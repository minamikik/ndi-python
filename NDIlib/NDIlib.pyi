from enum import IntEnum
from typing import Any, List, Optional, Tuple

import numpy as np
import pybind11

class FrameType(IntEnum):
    FRAME_TYPE_NONE = ...
    FRAME_TYPE_VIDEO = ...
    FRAME_TYPE_AUDIO = ...
    FRAME_TYPE_METADATA = ...
    FRAME_TYPE_ERROR = ...
    FRAME_TYPE_STATUS_CHANGE = ...
    FRAME_TYPE_MAX = ...

class FourCCVideoType(IntEnum):
    FOURCC_VIDEO_TYPE_UYVY = ...
    FOURCC_VIDEO_TYPE_UYVA = ...
    FOURCC_VIDEO_TYPE_P216 = ...
    FOURCC_VIDEO_TYPE_PA16 = ...
    FOURCC_VIDEO_TYPE_YV12 = ...
    FOURCC_VIDEO_TYPE_I420 = ...
    FOURCC_VIDEO_TYPE_NV12 = ...
    FOURCC_VIDEO_TYPE_BGRA = ...
    FOURCC_VIDEO_TYPE_BGRX = ...
    FOURCC_VIDEO_TYPE_RGBA = ...
    FOURCC_VIDEO_TYPE_RGBX = ...
    FOURCC_VIDEO_TYPE_MAX = ...

class FourCCAudioType(IntEnum):
    FOURCC_AUDIO_TYPE_FLTP = ...
    FOURCC_AUDIO_TYPE_MAX = ...

class FrameFormatType(IntEnum):
    FRAME_FORMAT_TYPE_PROGRESSIVE = ...
    FRAME_FORMAT_TYPE_INTERLEAVED = ...
    FRAME_FORMAT_TYPE_FIELD_0 = ...
    FRAME_FORMAT_TYPE_FIELD_1 = ...
    FRAME_FORMAT_TYPE_MAX = ...

class RecvBandwidth(IntEnum):
    RECV_BANDWIDTH_METADATA_ONLY = ...
    RECV_BANDWIDTH_AUDIO_ONLY = ...
    RECV_BANDWIDTH_LOWEST = ...
    RECV_BANDWIDTH_HIGHEST = ...
    RECV_BANDWIDTH_MAX = ...

class RecvColorFormat(IntEnum):
    RECV_COLOR_FORMAT_BGRX_BGRA = ...
    RECV_COLOR_FORMAT_UYVY_BGRA = ...
    RECV_COLOR_FORMAT_RGBX_RGBA = ...
    RECV_COLOR_FORMAT_UYVY_RGBA = ...
    RECV_COLOR_FORMAT_FASTEST = ...
    RECV_COLOR_FORMAT_BEST = ...
    RECV_COLOR_FORMAT_E_BGRX_BGRA = ...
    RECV_COLOR_FORMAT_E_UYVY_BGRA = ...
    RECV_COLOR_FORMAT_E_RGBX_RGBA = ...
    RECV_COLOR_FORMAT_E_UYVY_RGBA = ...
    RECV_COLOR_FORMAT_MAX = ...
    # for Windows only
    RECV_COLOR_FORMAT_BGRX_BGRA_FLIPPED = ...

class Source:
    def __init__(self, p_ndi_name: Optional[str] = None, p_url_address: Optional[str] = None) -> None: ...
    @property
    def ndi_name(self) -> str: ...
    @ndi_name.setter
    def ndi_name(self, value: str) -> None: ...
    @property
    def url_address(self) -> str: ...
    @url_address.setter
    def url_address(self, value: str) -> None: ...

class VideoFrameV2:
    def __init__(
        self,
        xres: int = 0,
        yres: int = 0,
        FourCC: int = ...,
        frame_rate_N: int = 30000,
        frame_rate_D: int = 1001,
        picture_aspect_ratio: float = 0.0,
        frame_format_type: int = ...,
        timecode: int = 0,
        p_data: Optional[np.ndarray] = None,
        line_stride_in_bytes: int = 0,
        p_metadata: Optional[str] = None,
        timestamp: int = 0,
    ) -> None: ...
    @property
    def xres(self) -> int: ...
    @xres.setter
    def xres(self, value: int) -> None: ...
    @property
    def yres(self) -> int: ...
    @yres.setter
    def yres(self, value: int) -> None: ...
    @property
    def FourCC(self) -> FourCCVideoType: ...
    @FourCC.setter
    def FourCC(self, value: FourCCVideoType) -> None: ...
    @property
    def frame_format_type(self) -> FrameFormatType: ...
    @frame_format_type.setter
    def frame_format_type(self, value: FrameFormatType) -> None: ...
    @property
    def frame_rate_N(self) -> int: ...
    @frame_rate_N.setter
    def frame_rate_N(self, value: int) -> None: ...
    @property
    def frame_rate_D(self) -> int: ...
    @frame_rate_D.setter
    def frame_rate_D(self, value: int) -> None: ...
    @property
    def picture_aspect_ratio(self) -> float: ...
    @picture_aspect_ratio.setter
    def picture_aspect_ratio(self, value: float) -> None: ...
    @property
    def timecode(self) -> int: ...
    @timecode.setter
    def timecode(self, value: int) -> None: ...
    @property
    def data(self) -> np.ndarray: ...
    @data.setter
    def data(self, value: np.ndarray) -> None: ...
    @property
    def line_stride_in_bytes(self) -> int: ...
    @line_stride_in_bytes.setter
    def line_stride_in_bytes(self, value: int) -> None: ...
    @property
    def metadata(self) -> str: ...
    @metadata.setter
    def metadata(self, value: str) -> None: ...
    @property
    def timestamp(self) -> int: ...
    @timestamp.setter
    def timestamp(self, value: int) -> None: ...

class AudioFrameV2:
    def __init__(
        self,
        sample_rate: int = 48000,
        no_channels: int = 2,
        no_samples: int = 0,
        timecode: int = 0,
        p_data: Optional[np.ndarray] = None,
        channel_stride_in_bytes: int = 0,
        p_metadata: Optional[str] = None,
        timestamp: int = 0,
    ) -> None: ...
    @property
    def sample_rate(self) -> int: ...
    @sample_rate.setter
    def sample_rate(self, value: int) -> None: ...
    @property
    def no_channels(self) -> int: ...
    @no_channels.setter
    def no_channels(self, value: int) -> None: ...
    @property
    def no_samples(self) -> int: ...
    @no_samples.setter
    def no_samples(self, value: int) -> None: ...
    @property
    def timecode(self) -> int: ...
    @timecode.setter
    def timecode(self, value: int) -> None: ...
    @property
    def data(self) -> np.ndarray: ...
    @data.setter
    def data(self, value: np.ndarray) -> None: ...
    @property
    def channel_stride_in_bytes(self) -> int: ...
    @channel_stride_in_bytes.setter
    def channel_stride_in_bytes(self, value: int) -> None: ...
    @property
    def metadata(self) -> str: ...
    @metadata.setter
    def metadata(self, value: str) -> None: ...
    @property
    def timestamp(self) -> int: ...
    @timestamp.setter
    def timestamp(self, value: int) -> None: ...

class AudioFrameV3:
    def __init__(
        self,
        sample_rate: int = 48000,
        no_channels: int = 2,
        no_samples: int = 0,
        timecode: int = 0,
        FourCC: FourCCAudioType = FourCCAudioType.FOURCC_AUDIO_TYPE_FLTP,
        p_data: Optional[np.ndarray] = None,
        channel_stride_in_bytes: int = 0,
        p_metadata: Optional[str] = None,
        timestamp: int = 0,
    ) -> None: ...
    @property
    def sample_rate(self) -> int: ...
    @sample_rate.setter
    def sample_rate(self, value: int) -> None: ...
    @property
    def no_channels(self) -> int: ...
    @no_channels.setter
    def no_channels(self, value: int) -> None: ...
    @property
    def no_samples(self) -> int: ...
    @no_samples.setter
    def no_samples(self, value: int) -> None: ...
    @property
    def timecode(self) -> int: ...
    @timecode.setter
    def timecode(self, value: int) -> None: ...
    @property
    def FourCC(self) -> FourCCAudioType: ...
    @FourCC.setter
    def FourCC(self, value: FourCCAudioType) -> None: ...
    @property
    def data(self) -> np.ndarray: ...
    @data.setter
    def data(self, value: np.ndarray) -> None: ...
    @property
    def channel_stride_in_bytes(self) -> int: ...
    @channel_stride_in_bytes.setter
    def channel_stride_in_bytes(self, value: int) -> None: ...
    @property
    def metadata(self) -> str: ...
    @metadata.setter
    def metadata(self, value: str) -> None: ...
    @property
    def timestamp(self) -> int: ...
    @timestamp.setter
    def timestamp(self, value: int) -> None: ...

class MetadataFrame:
    def __init__(self, length: int = 0, timecode: int = 0, p_data: Optional[str] = None) -> None: ...
    @property
    def length(self) -> int: ...
    @length.setter
    def length(self, value: int) -> None: ...
    @property
    def timecode(self) -> int: ...
    @timecode.setter
    def timecode(self, value: int) -> None: ...
    @property
    def data(self) -> str: ...
    @data.setter
    def data(self, value: str) -> None: ...

class Tally:
    def __init__(self, on_program: bool = False, on_preview: bool = False) -> None: ...
    @property
    def on_program(self) -> bool: ...
    @on_program.setter
    def on_program(self, value: bool) -> None: ...
    @property
    def on_preview(self) -> bool: ...
    @on_preview.setter
    def on_preview(self, value: bool) -> None: ...

class FindCreate:
    def __init__(
        self, show_local_sources: bool = True, p_groups: Optional[str] = None, p_extra_ips: Optional[str] = None
    ) -> None: ...
    @property
    def show_local_sources(self) -> bool: ...
    @show_local_sources.setter
    def show_local_sources(self, value: bool) -> None: ...
    @property
    def groups(self) -> Optional[str]: ...
    @groups.setter
    def groups(self, value: Optional[str]) -> None: ...
    @property
    def extra_ips(self) -> Optional[str]: ...
    @extra_ips.setter
    def extra_ips(self, value: Optional[str]) -> None: ...

class RecvCreateV3:
    def __init__(
        self,
        source_to_connect_to: Optional["Source"] = None,
        color_format: RecvColorFormat = RecvColorFormat.RECV_COLOR_FORMAT_UYVY_BGRA,
        bandwidth: RecvBandwidth = RecvBandwidth.RECV_BANDWIDTH_HIGHEST,
        allow_video_fields: bool = True,
        p_ndi_recv_name: Optional[str] = None,
    ) -> None: ...
    @property
    def source_to_connect_to(self) -> Optional["Source"]: ...
    @source_to_connect_to.setter
    def source_to_connect_to(self, value: Optional["Source"]) -> None: ...
    @property
    def color_format(self) -> RecvColorFormat: ...
    @color_format.setter
    def color_format(self, value: RecvColorFormat) -> None: ...
    @property
    def bandwidth(self) -> RecvBandwidth: ...
    @bandwidth.setter
    def bandwidth(self, value: RecvBandwidth) -> None: ...
    @property
    def allow_video_fields(self) -> bool: ...
    @allow_video_fields.setter
    def allow_video_fields(self, value: bool) -> None: ...
    @property
    def ndi_recv_name(self) -> Optional[str]: ...
    @ndi_recv_name.setter
    def ndi_recv_name(self, value: Optional[str]) -> None: ...

class SendCreate:
    def __init__(
        self,
        p_ndi_name: Optional[str] = None,
        p_groups: Optional[str] = None,
        clock_video: bool = True,
        clock_audio: bool = True,
    ) -> None: ...
    @property
    def ndi_name(self) -> Optional[str]: ...
    @ndi_name.setter
    def ndi_name(self, value: Optional[str]) -> None: ...
    @property
    def groups(self) -> Optional[str]: ...
    @groups.setter
    def groups(self, value: Optional[str]) -> None: ...
    @property
    def clock_video(self) -> bool: ...
    @clock_video.setter
    def clock_video(self, value: bool) -> None: ...
    @property
    def clock_audio(self) -> bool: ...
    @clock_audio.setter
    def clock_audio(self, value: bool) -> None: ...

class RoutingCreate:
    p_ndi_name: Optional[str]
    p_groups: Optional[str]

    def __init__(self, p_ndi_name: Optional[str] = None, p_groups: Optional[str] = None) -> None: ...
    @property
    def ndi_name(self) -> Optional[str]: ...
    @ndi_name.setter
    def ndi_name(self, value: Optional[str]) -> None: ...
    @property
    def groups(self) -> Optional[str]: ...
    @groups.setter
    def groups(self, value: Optional[str]) -> None: ...

# Processing.NDI.utilities
class AudioFrameInterleaved16s:
    def __init__(
        self,
        sample_rate: int = 48000,
        no_channels: int = 2,
        no_samples: int = 0,
        timecode: int = 0,
        reference_level: int = 0,
        p_data: int = 0,
    ) -> None: ...
    @property
    def sample_rate(self) -> int: ...
    @sample_rate.setter
    def sample_rate(self, value: int) -> None: ...
    @property
    def no_channels(self) -> int: ...
    @no_channels.setter
    def no_channels(self, value: int) -> None: ...
    @property
    def no_samples(self) -> int: ...
    @no_samples.setter
    def no_samples(self, value: int) -> None: ...
    @property
    def timecode(self) -> int: ...
    @timecode.setter
    def timecode(self, value: int) -> None: ...
    @property
    def reference_level(self) -> int: ...
    @reference_level.setter
    def reference_level(self, value: int) -> None: ...
    @property
    def data(self) -> np.ndarray: ...
    @data.setter
    def data(self, value: np.ndarray) -> None: ...

class AudioFrameInterleaved32s:
    def __init__(
        self,
        sample_rate: int = 48000,
        no_channels: int = 2,
        no_samples: int = 0,
        timecode: int = 0,
        reference_level: int = 0,
        p_data: int = 0,
    ) -> None: ...
    @property
    def sample_rate(self) -> int: ...
    @sample_rate.setter
    def sample_rate(self, value: int) -> None: ...
    @property
    def no_channels(self) -> int: ...
    @no_channels.setter
    def no_channels(self, value: int) -> None: ...
    @property
    def no_samples(self) -> int: ...
    @no_samples.setter
    def no_samples(self, value: int) -> None: ...
    @property
    def timecode(self) -> int: ...
    @timecode.setter
    def timecode(self, value: int) -> None: ...
    @property
    def reference_level(self) -> int: ...
    @reference_level.setter
    def reference_level(self, value: int) -> None: ...
    @property
    def data(self) -> np.ndarray: ...
    @data.setter
    def data(self, value: np.ndarray) -> None: ...

class AudioFrameInterleaved32f:
    def __init__(
        self, sample_rate: int = 48000, no_channels: int = 2, no_samples: int = 0, timecode: int = 0, p_data: int = 0
    ) -> None: ...
    @property
    def sample_rate(self) -> int: ...
    @sample_rate.setter
    def sample_rate(self, value: int) -> None: ...
    @property
    def no_channels(self) -> int: ...
    @no_channels.setter
    def no_channels(self, value: int) -> None: ...
    @property
    def no_samples(self) -> int: ...
    @no_samples.setter
    def no_samples(self, value: int) -> None: ...
    @property
    def timecode(self) -> int: ...
    @timecode.setter
    def timecode(self, value: int) -> None: ...
    @property
    def reference_level(self) -> int: ...
    @reference_level.setter
    def reference_level(self, value: int) -> None: ...
    @property
    def data(self) -> np.ndarray: ...
    @data.setter
    def data(self, value: np.ndarray) -> None: ...

SEND_TIMECODE_SYNTHESIZE: int
RECV_TIMESTAMP_UNDEFINED: int

# Processing.NDI.Lib
def initialize() -> None: ...
def destroy() -> None: ...
def version() -> str: ...
def is_supported_CPU() -> bool: ...

# Processing.NDI.Find
def find_create_v2(create_settings: Any = None) -> Any: ...
def find_destroy(instance: Any) -> None: ...
def find_get_current_sources(instance: Any) -> list: ...
def find_wait_for_sources(instance: Any, timeout_in_ms: int) -> bool: ...

# Processing.NDI.Recv
def recv_create_v3(create_settings: Any = None) -> Any: ...
def recv_destroy(instance: Any) -> None: ...
def recv_connect(instance: Any, source: Any = None) -> None: ...
def recv_capture_v2(instance: Any, timeout_in_ms: int) -> Tuple[Any, Any, Any, Any]: ...
def recv_capture_v3(instance: Any, timeout_in_ms: int) -> Tuple[Any, Any, Any, Any]: ...
def recv_free_video_v2(instance: Any, video_data: Any = None) -> None: ...
def recv_free_audio_v2(instance: Any, audio_data: Any = None) -> None: ...
def recv_free_audio_v3(instance: Any, audio_data: Any = None) -> None: ...
def recv_free_metadata(instance: Any, metadata: Any = None) -> None: ...
def recv_free_string(instance: Any, string: str) -> None: ...
def recv_send_metadata(instance: Any, metadata_frame: Any) -> bool: ...
def recv_set_tally(instance: Any, tally: Any) -> bool: ...
def recv_get_performance(instance: Any) -> Tuple[Any, Any]: ...
def recv_get_queue(instance: Any) -> Any: ...
def recv_clear_connection_metadata(instance: Any) -> None: ...
def recv_add_connection_metadata(instance: Any, metadata: Any) -> None: ...
def recv_get_no_connections(instance: Any) -> int: ...
def recv_get_web_control(instance: Any) -> str: ...
def recv_ptz_is_supported(instance: Any) -> bool: ...
def recv_recording_is_supported(instance: Any) -> bool: ...
def recv_ptz_zoom(instance: Any, zoom_value: float) -> bool: ...
def recv_ptz_zoom_speed(instance: Any, zoom_speed: float) -> bool: ...
def recv_ptz_pan_tilt(instance: Any, pan_value: float, tilt_value: float) -> bool: ...
def recv_ptz_pan_tilt_speed(instance: Any, pan_speed: float, tilt_speed: float) -> bool: ...
def recv_ptz_store_preset(instance: Any, preset_no: int) -> bool: ...
def recv_ptz_recall_preset(instance: Any, preset_no: int, speed: float) -> bool: ...
def recv_ptz_auto_focus(instance: Any) -> bool: ...
def recv_ptz_focus(instance: Any, focus_value: float) -> bool: ...
def recv_ptz_focus_speed(instance: Any, focus_speed: float) -> bool: ...
def recv_ptz_white_balance_auto(instance: Any) -> bool: ...
def recv_ptz_white_balance_indoor(instance: Any) -> bool: ...
def recv_ptz_white_balance_outdoor(instance: Any) -> bool: ...
def recv_ptz_white_balance_oneshot(instance: Any) -> bool: ...
def recv_ptz_white_balance_manual(instance: Any, red: float, blue: float) -> bool: ...
def recv_ptz_exposure_auto(instance: Any) -> bool: ...
def recv_ptz_exposure_manual(instance: Any, exposure_level: float) -> bool: ...
def recv_ptz_exposure_manual_v2(instance: Any, iris: float, gain: float, shutter_speed: float) -> bool: ...
def recv_recording_start(instance: Any, filename_hint: str) -> bool: ...
def recv_recording_stop(instance: Any) -> bool: ...
def recv_recording_set_audio_level(instance: Any, level_dB: float) -> bool: ...
def recv_recording_is_recording(instance: Any) -> bool: ...
def recv_recording_get_filename(instance: Any) -> str: ...
def recv_recording_get_error(instance: Any) -> str: ...
def recv_recording_get_times(instance: Any, times: Any) -> bool: ...

# Processing.NDI.Send
def send_create(create_settings: Any = None) -> Any: ...
def send_destroy(instance: Any) -> None: ...
def send_send_video_v2(instance: Any, video_data: Any) -> None: ...
def send_send_video_async_v2(instance: Any, video_data: Any) -> None: ...
def send_send_audio_v2(instance: Any, audio_data: Any) -> None: ...
def send_send_audio_v3(instance: Any, audio_data: Any) -> None: ...
def send_send_metadata(instance: Any, metadata: Any) -> None: ...
def send_capture(instance: Any, metadata: Any, timeout_in_ms: int) -> None: ...
def send_free_metadata(instance: Any, metadata: Any) -> None: ...
def send_get_tally(instance: Any, tally: Any, timeout_in_ms: int) -> bool: ...
def send_get_no_connections(instance: Any, timeout_in_ms: int) -> int: ...
def send_clear_connection_metadata(instance: Any) -> None: ...
def send_add_connection_metadata(instance: Any, metadata: Any) -> None: ...
def send_set_failover(instance: Any, failover_source: Any) -> None: ...
def send_get_source_name(instance: Any) -> str: ...

# Processing.NDI.Routing
def routing_create(create_settings: Any = None) -> Any: ...
def routing_destroy(instance: Any) -> None: ...
def routing_change(instance: Any, source: Any) -> bool: ...
def routing_clear(instance: Any) -> None: ...
def routing_get_no_connections(instance: Any, timeout_in_ms: int) -> int: ...
def routing_get_source_name(instance: Any) -> str: ...

# Processing.NDI.utilities
def util_send_send_audio_interleaved_16s(instance: Any, audio_data: Any) -> None: ...
def util_send_send_audio_interleaved_32s(instance: Any, audio_data: Any) -> None: ...
def util_send_send_audio_interleaved_32f(instance: Any, audio_data: Any) -> None: ...
def util_audio_to_interleaved_16s_v2(src: Any, dst: Any) -> None: ...
def util_audio_from_interleaved_16s_v2(src: Any, dst: Any) -> None: ...
def util_audio_to_interleaved_32s_v2(src: Any, dst: Any) -> None: ...
def util_audio_from_interleaved_32s_v2(src: Any, dst: Any) -> None: ...
def util_audio_to_interleaved_32f_v2(src: Any, dst: Any) -> None: ...
def util_audio_from_interleaved_32f_v2(src: Any, dst: Any) -> None: ...
def util_V210_to_P216(src_v210: Any, dst_p216: Any) -> None: ...
def util_P216_to_V210(src_p216: Any, dst_v210: Any) -> None: ...

# Processing.NDI.FrameSync
def framesync_create(receiver: Any) -> Any: ...
def framesync_destroy(instance: Any) -> None: ...
def framesync_capture_audio(instance: Any, sample_rate: int, no_channels: int, no_samples: int) -> Any: ...
def framesync_capture_audio_v2(instance: Any, sample_rate: int, no_channels: int, no_samples: int) -> Any: ...
def framesync_free_audio(instance: Any, audio_data: Any) -> None: ...
def framesync_free_audio_v2(instance: Any, audio_data: Any) -> None: ...
def framesync_audio_queue_depth(instance: Any) -> int: ...
def framesync_capture_video(instance: Any, field_type: Any = NDIlib_frame_format_type_progressive) -> Any: ...
def framesync_free_video(instance: Any, video_data: Any) -> None: ...
